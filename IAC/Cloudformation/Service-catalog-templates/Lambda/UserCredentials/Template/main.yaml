AWSTemplateFormatVersion: '2010-09-09'
Description: Weekly IAM credential age report with SNS notification

Parameters:
  NotificationEmail:
    Type: String
    Description: Email address to subscribe to the report

  LambdaCodeBucket:
    Type: String
    Description: S3 bucket containing Lambda code zips

Resources:

  IAMCredentialTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: IAMCredentialReportTopic
      Subscription:
        - Protocol: email
          Endpoint: !Ref NotificationEmail

  LambdaLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: CommonPythonDeps
      Description: Shared layer for Lambda dependencies
      Content:
        S3Bucket: !Ref LambdaCodeBucket
        S3Key: layers/common_layer.zip  # you must upload this
      CompatibleRuntimes:
        - python3.12

  NotificationLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: IAMReportNotifierRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: NotifySNSPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: sns:Publish
                Resource: '*'
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'

  ReportLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: IAMReportGeneratorRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ReportPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - iam:ListUsers
                  - iam:GetUser
                  - iam:ListAccessKeys
                  - iam:GetAccessKeyLastUsed
                  - lambda:InvokeFunction
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'

  SendNotificationFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: SendIAMReportNotification
      Runtime: python3.12
      Handler: send_notification.lambda_handler
      Role: !GetAtt NotificationLambdaRole.Arn
      Code:
        S3Bucket: !Ref LambdaCodeBucket
        S3Key: send_notification.zip
      Layers:
        - !Ref LambdaLayer
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref IAMCredentialTopic

  GenerateReportFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: GenerateIAMCredentialReport
      Runtime: python3.12
      Handler: generate_iam_report.lambda_handler
      Role: !GetAtt ReportLambdaRole.Arn
      Code:
        S3Bucket: !Ref LambdaCodeBucket
        S3Key: generate_iam_report.zip
      Timeout: 300
      Layers:
        - !Ref LambdaLayer
      Environment:
        Variables:
          NOTIFY_FUNCTION_NAME: !Ref SendNotificationFunction
          SNS_TOPIC_ARN: !Ref IAMCredentialTopic

  WeeklyScheduleRule:
    Type: AWS::Events::Rule
    Properties:
      Name: TriggerIAMCredentialCheck
      ScheduleExpression: cron(0 8 ? * 2 *) # Monday at 08:00 UTC
      State: ENABLED
      Targets:
        - Arn: !GetAtt GenerateReportFunction.Arn
          Id: WeeklyIAMCheck

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GenerateReportFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt WeeklyScheduleRule.Arn

  NotificationInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref SendNotificationFunction
      Action: lambda:InvokeFunction
      Principal: lambda.amazonaws.com
      SourceAccount: !Ref AWS::AccountId

Outputs:
  SNSArn:
    Value: !Ref IAMCredentialTopic
    Description: SNS Topic ARN

  ReportLambdaName:
    Value: !Ref GenerateReportFunction

  NotificationLambdaName:
    Value: !Ref SendNotificationFunction
