AWSTemplateFormatVersion: 2010-09-09
Description: This will help creates new golden AMIs for the environment

Parameters: 
  pRegion2:
    Description: Second region to create the AMI
    Type: AWS::SSM::Parameter::Value<String>
    Default: /standard/pRegion2
  pAwsAccount:
    Description: The account in which the AMI will be built
    Type: AWS::SSM::Parameter::Value<String>
    Default: /standard/pAwsAccount
  pSubnetID:
    Description: Subnet in which to create AMI
    Type: String
  pInstanceType:
    Description: The instance type to be used to create the ami
    Type: String 
  pDistribution:
    Description: The OS distribution to be used 
    Type: String
  pDescription:
    Description: The description of the service to be used 
    Type: String 
  pKeypair:
    Description: The keypair to be used wen building the AMI
    Type: String 
  pWorkingDirectory:
    Description: The directory in which all the build is going to happen
    Type: String
  pParentImageID:
    Description: The amazon linux 2 image
    Type: String
  pLogGroup:
    Description: This is the log group for file storage
    Type: String
  pKMSKey:
    Description: KMS key used during image build 
    Type: String
  pSNSSubscription:
    Description: The SNS topic used during the build 
    Type: String
  pSecurityGroup:
    Description: The security group used for the ami build 
    Type: String
  pAnsiblePlaybook:
    Description: The ansible playbook used during the build
    Type: String
  pVersion:
    Description: The version for the pipeline being created  
    Type: String
  pImageName:
    Description: Name for the amazon linux 2 AMI
    Type: String
 
Resources: 
  rEC2ImagebuilderAL2:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete 
    UpdateReplacePolicy: Delete 
    Properties:
      RetentionInDays: 7
      LogGroupName: !Ref pLogGroup

# https://docs.aws.amazon.com/ja_jp/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html
  rEC2ImageBuilderInstanceRole:
    Type: AWS::IAM::Role
    Metadata: 
      Comment: Role to be used for the AMI creation 
    Properties: 
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/EC2InstanceProfileForImageBuilder
      AssumeRolePolicyDocument:
        Statement: 
          - Action: 
            - sts:AssumeRole 
            Effect: Allow 
            Principal:
              Service:
                - !Sub 'ec2.${AWS::URLSuffix}' 
        Version: '2012-10-17' 
      Path: /EC2ImaeBuilder/
  # https://docs.aws.amazon.com/ja_jp/AWSCloudFormation/latest/UserGuide/aws-resource-iam-policy.html
  rEC2ImagebuilderPutParameterPolicy:
    Type: AWS::IAM::Policy
    Properties: 
      PolicyName: !Sub "${pAwsAccount}-AL2-miscellaneous-policy"
      PolicyDocument: 
        Version: "2012-10-17" 
        Statement: 
          - Effect: Allow 
            Action: 
              - 'ssm:PutParameter'
              - 'ec2:DescribeImages' 
              - 'secretsmanager:PutSecretValue'
              - 's3:GetObject'
              - 's3:PutObject'
            Resource: "*" 
      Roles: 
        - !Ref rEC2ImageBuilderInstanceRole
  # https://docs.aws.amazon.com/ja_jp/AWSCloudFormation/latest/UserGuide/aws-resource-iam-instanceprofile.html
  rEC2ImageBuilderInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Path: /EC2ImageBuilder/
      Roles: 
        - !Ref rEC2ImageBuilderInstanceRole 

  # https://docs.aws.amazon.com/ja_jp/AWSCloudFormation/latest/UserGuide/aws-resource-iam-policy.html
  rEC2ImageBuilderLogPolicy:
    Type: AWS::IAM::Policy
    Metadata:
      Comment: Allows the instance to save log files to an s3 bucket 
    Properties: 
      PolicyName: !Sub "${pAwsAccount}-ImageBuilderLogBucketPolicy"
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
            - s3:PutObject 
            Effect: Allow 
            Resource: 
              - Fn::Sub: 
                - arn:${AWS::Partition}:s3:::${BUCKET}/*
                - BUCKET: 
                    Ref: rEC2ImagebuilderLogBucket
      Roles: 
        - !Ref rEC2ImageBuilderInstanceRole

  # https://docs.aws.amazon.com/ja_jp/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket.html
  rEC2ImagebuilderLogBucket:
    Type: AWS::S3::Bucket
    Properties: 
      BucketEncryption:
        ServerSideEncryptionConfiguration:
             - ServerSideEncryptionByDefault:
                    SSEAlgorithm: AES256 
      PublicAccessBlockConfiguration:
           BlockPublicAcls: true 
           IgnorePublicAcls: true 
           BlockPublicPolicy: true 
           RestrictPublicBuckets: true

  rEC2ImageBuilderPipeline:
    Type: AWS::ImageBuilder::ImagePipeline
    Properties: 
      Name: !Sub "${pAwsAccount}-NewTech-Imagebuilder-Pipeline-2023" 
      Description: !Ref pDescription
      DistributionConfigurationArn: !Ref rEC2ImageBuilderDistributionConfiguration 
      EnhancedImageMetadataEnabled: true 
      ImageRecipeArn: !Ref rEC2ImageBuilderRecipe 
      InfrastructureConfigurationArn: !Ref rEC2ImageBuilderInfrastructureConfiguration 
      Schedule:
          PipelineExecutionStartCondition: EXPRESSION_MATCH_ONLY
          ScheduleExpression: "cron(0 10 * * ? *)" #10:00AM UTC daily
      Status: ENABLED 

  rEC2ImageBuilderDistributionConfiguration:
    Type: AWS::ImageBuilder::DistributionConfiguration 
    Properties: 
      Name: !Sub "${pAwsAccount}-ImageBuilder-DistributionConfiguration"
      Description: !Ref pDescription
      Distributions:
        - Region: !Sub ${AWS::Region}
          AmiDistributionConfiguration:
            Name: "amazonlinux2-golden-AMI-{{ imagebuilder:buildDate }}"
            Description: 'Amazon linux 2 Golden AMI' 
            AmiTags:
                Name: amazonlinux2-golden-AMI 
                OperatingSystem: !Ref pDistribution
                Status: Ready 
                Region: !Sub ${AWS::Region} 
            KmsKeyId: !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:alias/${pKMSKey}"

        - Region: !Ref pRegion2 
          AmiDistributionConfiguration:
              Name: "amazonlinux2-golden-template-{{ imagebuilder:buildDate }}"
              Description: 'Amazon linux 2 Golden AMI' 
              AmiTags:
                    Name: amazonlinux-golden-AMI 
                    OperatingSystem: !Ref pDistribution
                    Status: Ready 
                    Region: !Ref pRegion2
              KmsKeyId: !Sub "arn:aws:kms:${pRegion2}:${AWS::AccountId}:alias/${pKMSKey}"

  rEC2ImageBuilderInfrastructureConfiguration:
    Type: AWS::ImageBuilder::InfrastructureConfiguration
    Properties: 
      Name: !Sub "${pAwsAccount}-ImageBuilder-Infrastructure-Configuration"
      Description: !Ref pDescription
      InstanceProfileName: !Ref rEC2ImageBuilderInstanceProfile
      InstanceTypes:
           - !Ref pInstanceType
      KeyPair: !Ref pKeypair
      TerminateInstanceOnFailure: true 
      SecurityGroupIds:
           - !Ref pSecurityGroup
      SubnetId: !Ref pSubnetID 
      SnsTopicArn: !Sub "arn:aws:sns:us-east-1:${AWS::AccountId}:${pSNSSubscription}"
      Logging:
           S3Logs:
                S3BucketName: !Ref rEC2ImagebuilderLogBucket 
                S3KeyPrefix: !Sub "${pImageName}/logs"
  rEC2ImageBuilderGitComponent:
    Type: AWS::ImageBuilder::Component
    Properties: 
      Name: !Sub "${pAwsAccount}-Git-Component"
      Description: !Ref pDescription
      ChangeDescription: "Install git in amazon linux 2 AMI"
      KmsKeyId: !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:alias/${pKMSKey}"
      Platform: Linux 
      SupportedOsVersions:
        - !Ref pDistribution
      Version: !Ref pVersion
      Data: 
        Fn::Sub: | 
          name: Image hardening with Ansible 
          description: install git on amazon linux 2
          schemaVersion: 1.0 
          phases:
            - name: build 
              steps: 
                - name: InstallGit
                  action: ExecuteBash 
                  inputs: 
                    commands: 
                      - sudo yum install git -y 
                      
  rEC2ImageBuilderSSHComponent:
    Type: AWS::ImageBuilder::Component
    Properties: 
      Name: !Sub "${pAwsAccount}-ssh-Component"
      Description: !Ref pDescription
      ChangeDescription: "Configure ssh"
      KmsKeyId: !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:alias/${pKMSKey}"
      Platform: Linux 
      SupportedOsVersions:
        - !Ref pDistribution
      Version: !Ref pVersion
      Data: 
        Fn::Sub: | 
          name: Configure SSH
          description: install and configure ssh keys
          schemaVersion: 1.0 
          phases:
            - name: build 
              steps: 
                - name: ConfigureSSH
                  action: ExecuteBash 
                  inputs: 
                    commands: 
                      - |
                          #!/bin/bash
                          ssh_dir="/root/.ssh"
                          # Check if .ssh directory exists
                          if [ -d "$ssh_dir" ]; then
                              echo "The /.ssh directory already exists."
                          else
                              # If not, create /.ssh directory with elevated privileges
                              sudo mkdir -p "$ssh_dir"
                              echo "The /.ssh directory has been created."
                          fi
                          aws s3 cp s3://bkmicroservices/Keys/imagebuilder ~/.ssh/imagebuilder
                          chmod 400 ~/.ssh/imagebuilder
                          echo "Host github.com" >> ~/.ssh/config
                          echo "   IdentityFile ~/.ssh/imagebuilder" >> ~/.ssh/config
                          echo "   StrictHostKeyChecking no" >> ~/.ssh/config
                          echo "   IdentitiesOnly yes"  >> ~/.ssh/config
                          echo "   PreferredAuthentications publickey" >> ~/.ssh/config 
                          chmod 600 ~/.ssh/config

  rEC2ImageBuilderComponent:
    Type: AWS::ImageBuilder::Component
    Properties: 
      Name: !Sub "${pAwsAccount}-Ansible-Component"
      Description: !Ref pDescription
      ChangeDescription: "Install several packages in amazon linux 2023 AMI"
      KmsKeyId: !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:alias/${pKMSKey}"
      Platform: Linux 
      SupportedOsVersions:
        - !Ref pDistribution
      Version: !Ref pVersion
      Data: 
        Fn::Sub: | 
          name: Image hardening with Ansible 
          description: Download and run ansible roles 
          schemaVersion: 1.0 
          phases:
            - name: build 
              steps: 
                - name: InstallAnsible 
                  action: ExecuteBash 
                  inputs: 
                    commands: 
                      # - sudo yum update -y 
                      # - sudo yum install gcc openssl-devel bzip2-devel libffi-devel 
                      # - cd /opt 
                      # - wget https://www.python.org/ftp/python/3.9.16/Python-3.9.16.tgz
                      # - sudo tar xzf Python-3.9.16.tgz  
                      # - cd Python-3.9.16  
                      # - sudo ./configure --enable-optimizations
                      # - sudo make altinstall 
                      # - sudo rm -f /opt/Python-3.9.16.tgz
                      # - python3.9 -m venv env
                      # - source env/bin/activate 
                      - sudo yum install python3 -y
                      - sudo yum install python3-pip -y
                      - sudo pip3 install 'ansible<7' 
                - name: DownloadPlaybookFiles
                  action: S3Download
                  maxAttempts: 3
                  inputs:
                    - source: s3://bkmicroservices/PlaybookFiles/requirements.yml
                      destination: requirements.yml
                      expectedBucketOwner: 485147667400
                      overwrite: false
                    - source: s3://bkmicroservices/PlaybookFiles/site.yml
                      destination: ${pAnsiblePlaybook} 
                      expectedBucketOwner: 485147667400 
                      overwrite: false
                # - name: DownloadPlaybookFiles 
                #   action: WebDownload
                #   maxAttempts: 3 
                #   inputs: 
                #     - source: https://raw.githubusercontent.com/njibrigthain100/ansible-java_1/main/requirements.yml?token=GHSAT0AAAAAACKCDIZ5V3YL6X7RW7DLWUNIZLTS7BA
                #     # https://raw.githubusercontent.com/njibrigthain100/ansible-java_1/main/requirements.yml
                #       destination: requirements.yml
                #     - source: https://raw.githubusercontent.com/njibrigthain100/ansible-java_1/main/site.yml?token=GHSAT0AAAAAACKCDIZ5V6WLH7KOHUQLYQXAZLTS74Q
                #     # https://raw.githubusercontent.com/njibrigthain100/ansible-java_1/main/site.yml
                #       destination: ${pAnsiblePlaybook} 
                - name: PullRoles 
                  action: ExecuteBash 
                  inputs:
                    commands:
                      - ansible-galaxy install -r requirements.yml -p ./roles
                - name: InvokeAnsible 
                  action: ExecuteBinary 
                  inputs: 
                    path: ansible-playbook 
                    arguments:
                      - '{{ build.DownloadPlaybookFiles.inputs[1].destination }}'

  rEC2ImageBuilderParameterStoreComponent:
    Type: AWS::ImageBuilder::Component
    Properties: 
      Name: !Sub "${pAwsAccount}-Parameter-Component"
      Description: !Ref pDescription
      ChangeDescription: "Send AMI to parameter store daily"
      KmsKeyId: !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:alias/${pKMSKey}"
      Platform: Linux 
      SupportedOsVersions:
        - !Ref pDistribution
      Version: !Ref pVersion
      Data: 
        Fn::Sub: | 
          name: Send AMI to parameter store 
          description: Sends values to parameter store
          schemaVersion: 1.0 
          phases:
            - name: test 
              steps: 
                - name: AMIParameterValue
                  action: ExecuteBash 
                  inputs: 
                    commands: 
                      - aws ec2 describe-images --owners self --query 'reverse(sort_by(Images,&CreationDate))[0].ImageId' --output text --region us-east-1 | aws ssm put-parameter --name " /standard/Ami/Daily" --value "$(cat -)" --type "String" --overwrite --region us-east-1  
  rEC2ImageBuilderSecretsManagerComponent:
    Type: AWS::ImageBuilder::Component
    Properties: 
      Name: !Sub "${pAwsAccount}-SecretsManager-Component"
      Description: !Ref pDescription
      ChangeDescription: "Send AMI to Secrets manager daily"
      KmsKeyId: !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:alias/${pKMSKey}"
      Platform: Linux 
      SupportedOsVersions:
        - !Ref pDistribution
      Version: !Ref pVersion
      Data: 
        Fn::Sub: | 
          name: Send AMI to Secrets Manager 
          description: Sends values to secrets manager
          schemaVersion: 1.0 
          phases:
            - name: test 
              steps: 
                - name: AMISecretsManager
                  action: ExecuteBash 
                  inputs: 
                    commands: 
                      - aws secretsmanager put-secret-value --secret-id BK-PROD-us-east-1-Daily-AMI --secret-string "{\"Daily-ami\":"\"$(aws ec2 describe-images --owners self --query 'reverse(sort_by(Images,&CreationDate))[0].ImageId' --output text)\"}

  rEC2ImageBuilderRecipe:
    Type: 'AWS::ImageBuilder::ImageRecipe'
    Properties:
      Name: !Sub "${pAwsAccount}-ImageBuilder-Recipe"
      Version: !Ref pVersion
      WorkingDirectory: !Ref pWorkingDirectory
      ParentImage: !Sub "arn:${AWS::Partition}:imagebuilder:${AWS::Region}:aws:image/${pParentImageID}"
      Components:
        - ComponentArn: !Sub "arn:${AWS::Partition}:imagebuilder:${AWS::Region}:aws:component/amazon-cloudwatch-agent-linux/x.x.x"
        - ComponentArn: !Sub "arn:${AWS::Partition}:imagebuilder:${AWS::Region}:aws:component/aws-cli-version-2-linux/x.x.x" 
        - ComponentArn: !Ref rEC2ImageBuilderSSHComponent
        - ComponentArn: !Ref rEC2ImageBuilderGitComponent
        - ComponentArn: !Ref rEC2ImageBuilderComponent
        - ComponentArn: !Ref rEC2ImageBuilderSecretsManagerComponent
        - ComponentArn: !Ref rEC2ImageBuilderParameterStoreComponent
      AdditionalInstanceConfiguration:
          UserDataOverride: 
            Fn::Base64:
              !Sub |
                #/bin/bash -x 
                sudo yum install -y https::/s3.${AWS::Region}.${AWS::URLSuffix}/amazon-ssm-${AWS::Region}/latest/linux_amd64/amazon-ssm-agent.rpm
                mkdir -p ${pWorkingDirectory}
      BlockDeviceMappings:
        - DeviceName: "/dev/xvda"
          Ebs:
            DeleteOnTermination: true
            Encrypted: true
            Iops: 100
            KmsKeyId: !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:alias/${pKMSKey}"
            # SnapshotId: "snapshot-id"
            VolumeType: "gp3"
            VolumeSize: '10'
