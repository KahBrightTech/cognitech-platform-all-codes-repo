
schemaVersion: '2.2'
description: "Document to install AWX on ubuntu server"
parameters: 
mainSteps:
          - action: aws:runShellScript
            name: AWXUbuntuInstallation
            description:  |
              Installs various linux packages based on os type 
            inputs:
              runCommand:
                  - |
                     #!/bin/bash -xe
                      ##############################################################
                      #  INSTALLS AND CONFIGURES AWX ON UBUNTU  #
                      ##############################################################

                      # Update and upgrade the system
                      sudo apt update && sudo apt upgrade -y

                      # Install aws cli 
                      # Check if AWS CLI is already installed
                      if ! command -v aws &> /dev/null
                      then
                          echo "AWS CLI not found. Installing AWS CLI..."
                          # Install aws cli without prompt for third-party licenses
                          sudo apt install -y unzip curl
                          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
                          unzip awscliv2.zip
                          sudo ./aws/install --bin-dir /usr/local/bin --install-dir /usr/local/aws-cli --update
                      else
                          echo "AWS CLI is already installed. Skipping installation."
                      fi

                      # Install k3s (Lightweight Kubernetes)
                      sudo curl -sfL https://get.k3s.io | sh -

                      # Install kustomize
                      sudo curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
                      sudo mv kustomize /usr/local/bin/

                      # Create the kustomization.yaml file
                      cat <<EOF > kustomization.yaml
                      apiVersion: kustomize.config.k8s.io/v1beta1
                      kind: Kustomization
                      resources:
                        - github.com/ansible/awx-operator/config/default?ref=2.19.0

                      images:
                        - name: quay.io/ansible/awx-operator
                          newTag: 2.19.0

                      namespace: awx
                      EOF

                      # Change permission and ownership of /etc/rancher file
                      sudo chown ubuntu:ubuntu /etc/rancher/k3s/k3s.yaml

                      # Apply the kustomization to install AWX Operator
                      sudo kustomize build . | kubectl apply -f -

                      # Check the AWX namespace pods
                      kubectl get pods --namespace awx

                      # Create the awx.yaml file for AWX deployment
                      cat <<EOF > awx.yaml
                      apiVersion: awx.ansible.com/v1beta1
                      kind: AWX
                      metadata:
                        name: awx-demo
                      spec:
                        service_type: nodeport
                        nodeport_port: 30080
                      EOF

                      # Delete and recreate the kustomization file
                      rm -rf kustomization.yaml

                      # Create the kustomization.yaml file again
                      cat <<EOF > kustomization.yaml
                      apiVersion: kustomize.config.k8s.io/v1beta1
                      kind: Kustomization
                      resources:
                        - github.com/ansible/awx-operator/config/default?ref=2.19.0
                        - awx.yaml

                      images:
                        - name: quay.io/ansible/awx-operator
                          newTag: 2.19.0

                      namespace: awx
                      EOF

                      # Apply the changes again to deploy AWX
                      sudo kustomize build . | kubectl apply -f -

                      # Define the secret name
                      SECRET_NAME="awx-credentials"

                      # Wait for AWX demo secret to be created
                      MAX_RETRIES=10
                      RETRY_INTERVAL=30

                      for i in $(seq 1 $MAX_RETRIES); do
                          echo "Checking for AWX admin password secret (attempt $i/$MAX_RETRIES)..."
                          if sudo kubectl get secrets --namespace=awx awx-demo-admin-password &> /dev/null; then
                              echo "AWX admin password secret found."
                              sudo kubectl get secrets --namespace=awx awx-demo-admin-password -o jsonpath='{.data.password}' | base64 -d > password
                              break
                          else
                              echo "AWX admin password secret not found. Retrying in $RETRY_INTERVAL seconds..."
                              sleep $RETRY_INTERVAL
                          fi
                      done

                      if [ ! -f password ]; then
                          echo "Failed to retrieve AWX admin password secret after $MAX_RETRIES attempts. Exiting."
                          exit 1
                      fi

                      # Get the public IP address of the instance
                      PUBLIC_IP=$(aws ec2 describe-instances --instance-ids $(curl -s http://169.254.169.254/latest/meta-data/instance-id) --query 'Reservations[].Instances[].PublicIpAddress' --output text)

                      # Check if the secret already exists
                      if aws secretsmanager describe-secret --secret-id "$SECRET_NAME" &> /dev/null
                      then
                          echo "Secret $SECRET_NAME already exists. Updating secret..."
                          # Update the existing secret
                          aws secretsmanager update-secret --secret-id "$SECRET_NAME" --secret-string "{\"username\":\"admin\",\"password\":\"$(cat password)\",\"port\":\"30080\"}"
                      else
                          echo "Secret $SECRET_NAME does not exist. Creating secret..."
                          # Create the secret in Secrets Manager
                          aws secretsmanager create-secret --name "$SECRET_NAME" --secret-string "{\"username\":\"admin\",\"password\":\"$(cat password)\",\"port\":\"30080\"}"
                      fi
