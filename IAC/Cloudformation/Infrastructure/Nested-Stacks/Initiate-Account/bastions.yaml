AWSTemplateFormatVersion: 2010-09-09
Description: Creates both the ssh and rdp bastions in the shared services account 

Parameters: 
  pAwsAccount:
    Description: The account in which the resources will be created
    Type: AWS::SSM::Parameter::Value<String>
    Default: /standard/AWSAccount
  
  pAwsAccountLC:
    Description: The account in which the resources will be created
    Type: AWS::SSM::Parameter::Value<String>
    Default: /standard/AWSAccountLC
    
  pAppName:
    Type: String
    Default: cognitech
  
  pAmznLnx2LatestAmiId:
    Description: The latest ami Id for amazon linux 2
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
  
  pWindows2019LatestAmiId:
    Description: The latest ami Id for windows 2019 
    Type : 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: /aws/service/ami-windows-latest/Windows_Server-2019-English-Full-Base
  
  pBastionInstanceProfile:
    Description: The instance profile for the bastions 
    Type: String
  
  pBastionRDPSecurityGroup:
    Description: The security group for the rdp bastion  
    Type: String
  
  pBastionSSHSecurityGroup:
    Description: The security group for the ssh bastion
    Type: String
  
  pSharedSeervicesPublicSubnetId:
    Description: The subnet Id for the shared services public subnet
    Type: String
  
  pDocumentName:
    Description: The domain join document for the server
    Type: String
  
  pBastionAdminUser:
    Description: The admin user used to access the bastion servers
    Type: String

  pBastionAdminUserPassword:
    Description: The admin user password
    Type: String

Mappings:
  mAccountVariables:
    "271457809232":
      pKeyPair: TBD
      pInstanceType: t2.micro
    "388927731914":
      pKeyPair: TBD
      pInstanceType: t2.micro 
    "882680178335":
      pKeyPair: TBD
      pInstanceType: t2.micro
    "485147667400":
      pKeyPair: windowscomputer 
      pInstanceType: t2.large 
    "526645041140":
      pKeyPair: TBD
      pInstanceType: t2.micro
    "471112707322":
      pKeyPair: TBD
      pInstanceType: t2.micro
    "730335294148":
      pKeyPair: TBD
      pInstanceType: t2.micro
    "533267408704": 
      pKeyPair: TBD
      pInstanceType: t2.micro
    "637423478842":
      pKeyPair: TBD 
      pInstanceType: t2.micro
     
Resources: 
  # https://docs.aws.amazon.com/ja_jp/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-instance.html
  rSSHBastion:
    Type: AWS::EC2::Instance
    Properties: 
      IamInstanceProfile: !Ref pBastionInstanceProfile
      ImageId: !Ref pAmznLnx2LatestAmiId
      InstanceType: !FindInMap 
        - mAccountVariables
        - !Ref AWS::AccountId 
        - pInstanceType
      KeyName: !FindInMap 
        - mAccountVariables
        - !Ref AWS::AccountId 
        - pKeyPair
      SecurityGroupIds: 
        - !Ref pBastionSSHSecurityGroup
      SubnetId: !Ref pSharedSeervicesPublicSubnetId
      UserData:  
        Fn::Base64: !Sub | 
          #!/bin/bash -xe
          # Set username and password
          USER="${pBastionAdminUser}"
          PASSWORD="${pBastionAdminUserPassword}"
          # Create the user without prompts
          if id "$USER" &>/dev/null; then
              echo "User $USER already exists."
          else
              useradd -m -s /bin/bash "$USER"
              echo "User $USER created."
          fi
          # Set a password for the user
          echo "$USER:$PASSWORD" | chpasswd
          # Add the user to the sudoers file for passwordless sudo
          if ! grep -q "^$USER ALL=(ALL) NOPASSWD:ALL" /etc/sudoers; then
              echo "$USER ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers
              echo "User $USER added to sudoers file with passwordless authentication."
          fi
          # Enable password authentication in the SSH config
          sed -i 's/^#PasswordAuthentication no/PasswordAuthentication yes/' /etc/ssh/sshd_config
          sed -i 's/^PasswordAuthentication no/PasswordAuthentication yes/' /etc/ssh/sshd_config
          # Restart SSH service to apply changes
          systemctl restart sshd
          # Disable requiretty for sudo (optional, for some cloud environments)
          if ! grep -q "^Defaults !requiretty" /etc/sudoers; then
              echo "Defaults !requiretty" >> /etc/sudoers
              echo "requiretty disabled for sudo."
          fi
          echo "User creation and configuration completed."
      Tags: 
        - Key: Name 
          Value: !Sub ${ pAwsAccount }-${ AWS::Region}-${ pAppName }-SSH-bastion 
        - Key: backup
          Value: !Sub ${ AWS::Region}-monthly 
        - Key: Patch Group
          Value: !Sub ${ pAwsAccount }-${ AWS::Region}-Linux
        - Key: Cost Center 
          Value: 1.0.0.1
        - Key: DNSSuffix 
          Value: kahbrigthllc.com
        - Key: DNSHostName 
          Value: !Sub ${ pAwsAccountLC }lapp 
        - Key: Type  
          Value: Bastion
      

  rRDPBastion:
    Type: AWS::EC2::Instance
    Properties: 
      IamInstanceProfile: !Ref pBastionInstanceProfile
      ImageId: !Ref pWindows2019LatestAmiId
      InstanceType: !FindInMap 
        - mAccountVariables
        - !Ref AWS::AccountId 
        - pInstanceType
      KeyName: !FindInMap 
        - mAccountVariables
        - !Ref AWS::AccountId 
        - pKeyPair
      SecurityGroupIds: 
        - !Ref pBastionRDPSecurityGroup
      SubnetId: !Ref pSharedSeervicesPublicSubnetId
      UserData:  
        Fn::Base64: !Sub | 
          <powershell>
            $Username = "${pBastionAdminUser}"
            $Password = "${pBastionAdminUserPassword}" | ConvertTo-SecureString -AsPlainText -Force
            $RdpPort = 3389
            # --- Create New User ---
            New-LocalUser -Name $Username -Password $Password -FullName "New User" -Description "User created via EC2 user data" -PasswordNeverExpires
            # --- Add User to Remote Desktop Users Group ---
            Add-LocalGroupMember -Group "Remote Desktop Users" -Member $Username
            # --- Add User to Administrators Group ---
            Add-LocalGroupMember -Group "Administrators" -Member $Username
            # --- Enable RDP Access ---
            # Set the registry key to enable RDP
            Set-ItemProperty -Path "HKLM:\System\CurrentControlSet\Control\Terminal Server" -Name "fDenyTSConnections" -Value 0
            # --- Configure Windows Firewall to Allow RDP ---
            # Allow RDP inbound rule in Windows Firewall
            New-NetFirewallRule -DisplayName "Allow RDP" -Direction Inbound -Protocol TCP -LocalPort $RdpPort -Action Allow
            # --- Confirm RDP and User Setup ---
            Write-Host "RDP access enabled, new user $Username created, added to Remote Desktop Users and Administrators groups."
          </powershell>
      Tags: 
        - Key: Name 
          Value: !Sub ${ pAwsAccount }-${ AWS::Region}-${ pAppName }-RDP-bastion
        - Key: backup
          Value: !Sub ${ AWS::Region}-monthly 
        - Key: Patch Group
          Value: !Sub ${ pAwsAccount }-${ AWS::Region}-Windows
        - Key: Cost Center 
          Value: 1.0.0.1
        - Key: DNSSuffix 
          Value: kahbrigthllc.com
        - Key: DNSHostName 
          Value: !Sub ${ pAwsAccountLC }wb
        - Key: Type  
          Value: Bastion

Outputs:
  oSSHBastionInstanceId:
    Description: The Id of the ssh bastion 
    Value: !Ref rSSHBastion
    Export:
      Name: !Sub ${ pAwsAccount }-${ AWS::Region}-${ pAppName }-ssh-bastion-Id

  oRDPBastionInstanceId:
    Description: The Id of the rdp bastion
    Value: !Ref rRDPBastion
    Export:
      Name: !Sub ${ pAwsAccount }-${ AWS::Region}-${ pAppName }-rdp-bastion-Id
  

    
