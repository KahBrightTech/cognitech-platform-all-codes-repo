AWSTemplateFormatVersion: 2010-09-09
Description: Creates both the windows and linux Web servers 

Parameters: 
  pAwsAccount:
    Description: The account in which the resources will be created
    Type: AWS::SSM::Parameter::Value<String>
    Default: /standard/AWSAccount
  
  pAwsAccountLC:
    Description: The account in which the resources will be created
    Type: AWS::SSM::Parameter::Value<String>
    Default: /standard/AWSAccountLC
    
  pAppName:
    Type: String
    Default: cognitech
  
  pAmznLnx2LatestAmiId:
    Description: The latest ami Id for amazon linux 2
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
  
  pWindows2019LatestAmiId:
    Description: The latest ami Id for windows 2019 
    Type : 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: /aws/service/ami-windows-latest/Windows_Server-2019-English-Full-Base
  
  pWebServerInstanceProfile:
    Description: The instance profile for the webserver
    Type: String
  
  pWindowsWebServerSecurityGroup:
    Description: The windows webserver security group 
    Type: String
  
  pLinuxWebServerSecurityGroup:
    Description: The linux webserver security group
    Type: String
  
  pWebServerPrivateSubnetId:
    Description: The subnet Id for the webserver 
    Type: String

  pDocumentName:
    Description: The domain join document for the server
    Type: String

  pAvailabilityZones:
    Description: The availability zones on which the resource will be created 
    Type: CommaDelimitedList
    Default: us-east-1a, us-east-1b

Mappings:
  mAccountVariables:
    "271457809232":
      pKeyPair: TBD
      pInstanceType: t2.micro
    "388927731914":
      pKeyPair: TBD
      pInstanceType: t2.micro 
    "882680178335":
      pKeyPair: TBD
      pInstanceType: t2.micro
    "485147667400":
      pKeyPair: windowscomputer 
      pInstanceType: t2.large 
    "526645041140":
      pKeyPair: TBD
      pInstanceType: t2.micro
    "471112707322":
      pKeyPair: TBD
      pInstanceType: t2.micro
    "730335294148":
      pKeyPair: TBD
      pInstanceType: t2.micro
    "533267408704": 
      pKeyPair: TBD
      pInstanceType: t2.micro
    "637423478842":
      pKeyPair: TBD 
      pInstanceType: t2.micro
     
Resources: 
  # https://docs.aws.amazon.com/ja_jp/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-instance.html
  rLinuxWebserver01:
    Type: AWS::EC2::Instance
    Properties: 
      IamInstanceProfile: !Ref pWebServerInstanceProfile
      ImageId: !Ref pAmznLnx2LatestAmiId
      UserData:  
        Fn::Base64: !Sub | 
           #!/bin/bash -xe
              Url="https://www.free-css.com/assets/files/free-css-templates/download/page286/cobsine.zip"
              Home_path="/var/www/html"
              #Update and install apache
              yum update -y
              yum install -y httpd
              #Create the directory
              mkdir temp
              cd temp
              # Download and unzip the url
              wget "$Url"
              # Extract the filename from the URL
              zipped_file=$(basename "$Url")
              # Unzip the zipped file
              unzip "$zipped_file"
              # unzip cobsine.zip
              # Capture the name of the unzipped directory
              Unzipped_directory=$(ls -d */)
              mv "$Unzipped_directory"/* "$Home_path"
              #Start and enable apache
              systemctl enable httpd
              systemctl restart httpd
              #Remove temp directory
              cd ../
              rm -rf temp
      InstanceType: !FindInMap 
        - mAccountVariables
        - !Ref AWS::AccountId 
        - pInstanceType
      KeyName: !FindInMap 
        - mAccountVariables
        - !Ref AWS::AccountId 
        - pKeyPair
      SecurityGroupIds: 
        - !Ref pLinuxWebServerSecurityGroup
      SubnetId: !Ref pWebServerPrivateSubnetId
      Tags: 
        - Key: Name 
          Value: !Sub ${ pAwsAccount }-${ AWS::Region}-${ pAppName }-Linux-Web-01
        - Key: backup
          Value: !Sub ${ AWS::Region}-daily 
        - Key: Patch Group
          Value: !Sub ${ pAwsAccount }-${ AWS::Region}-Linux 
        - Key: Cost Center 
          Value: 1.0.0.1
        - Key: DNSSuffix 
          Value: kahbrigthllc.com
        - Key: DNSHostName 
          Value: !Sub ${ pAwsAccountLC }lapp 
        - Key: Type  
          Value: Web
        - Key: DomainJoin 
          Value: yes
        - Key: PatchGroup 
          Value: Linux-PatchGroup
        - Key: Schedule 
          Value: !Sub ${ pAwsAccount }-${ pAppName }-App
  
  rLinuxWebserver1Volume:
    Type: AWS::EC2::Volume
    Properties:
      AvailabilityZone: !Select [ 0, !Ref pAvailabilityZones ]
      Size: 30
      Tags:
        - Key: Backup
          Value: Daily

  rLinuxWebserver1VolumeAttachment:
    Type: AWS::EC2::VolumeAttachment
    Properties: 
      Device: /dev/sdf
      InstanceId: !Ref rLinuxWebserver01
      VolumeId: !Ref rLinuxWebserver1Volume

  rLinuxWebserver02:
    Type: AWS::EC2::Instance
    Properties: 
      IamInstanceProfile: !Ref pWebServerInstanceProfile
      ImageId: !Ref pAmznLnx2LatestAmiId
      InstanceType: !FindInMap 
        - mAccountVariables
        - !Ref AWS::AccountId 
        - pInstanceType
      KeyName: !FindInMap 
        - mAccountVariables
        - !Ref AWS::AccountId 
        - pKeyPair
      SecurityGroupIds: 
        - !Ref pLinuxWebServerSecurityGroup
      SubnetId: !Ref pWebServerPrivateSubnetId
      UserData: 
        Fn::Base64: !Sub | 
            #!/bin/bash -xe
            Url="https://www.free-css.com/assets/files/free-css-templates/download/page281/dotnet.zip"
            Home_path="/var/www/html"
            #Update and install apache
            yum update -y
            yum install -y httpd
            #Create the directory
            mkdir temp
            cd temp
            # Download and unzip the url
            wget "$Url"
            # Extract the filename from the URL
            zipped_file=$(basename "$Url")
            # Unzip the zipped file
            unzip "$zipped_file"
            # unzip dotnet.zip
            Unzipped_directory=$(ls -d */)
            mv "$Unzipped_directory"/* "$Home_path"
            #Start and enable apache 
            systemctl enable httpd
            systemctl restart httpd 
            #Remove temp directory
            cd ../
            rm -rf temp
      Tags: 
        - Key: Name 
          Value: !Sub ${ pAwsAccount }-${ AWS::Region}-${ pAppName }-Linux-Web-02
        - Key: backup
          Value: !Sub ${ AWS::Region}-daily 
        - Key: Patch Group
          Value: !Sub ${ pAwsAccount }-${ AWS::Region}-Linux 
        - Key: Cost Center 
          Value: 1.0.0.1
        - Key: DNSSuffix 
          Value: kahbrigthllc.com
        - Key: DNSHostName 
          Value: !Sub ${ pAwsAccountLC }lapp 
        - Key: Type  
          Value: Web
        - Key: DomainJoin 
          Value: yes
        - Key: PatchGroup 
          Value: Linux-PatchGroup
        - Key: Schedule 
          Value: !Sub ${ pAwsAccount }-${ pAppName }-App
  
  rLinuxWebserver2Volume:
    Type: AWS::EC2::Volume
    Properties:
      AvailabilityZone: !Select [ 0, !Ref pAvailabilityZones ]
      Size: 30
      Tags:
        - Key: Backup
          Value: Daily

  rLinuxWebserver2VolumeAttachment:
    Type: AWS::EC2::VolumeAttachment
    Properties: 
      Device: /dev/sdf
      InstanceId: !Ref rLinuxWebserver02
      VolumeId: !Ref rLinuxWebserver2Volume


  rWindowsWebserver01:
    Type: AWS::EC2::Instance
    Properties: 
      IamInstanceProfile: !Ref pWebServerInstanceProfile
      ImageId: !Ref pWindows2019LatestAmiId
      InstanceType: !FindInMap 
        - mAccountVariables
        - !Ref AWS::AccountId 
        - pInstanceType
      KeyName: !FindInMap 
        - mAccountVariables
        - !Ref AWS::AccountId 
        - pKeyPair
      SecurityGroupIds: 
        - !Ref pWindowsWebServerSecurityGroup
      SubnetId: !Ref pWebServerPrivateSubnetId
      UserData:  
        Fn::Base64: !Sub | 
          <powershell>
            # Get a token for IMDSv2
            $token = Invoke-RestMethod -Method Put -Uri http://169.254.169.254/latest/api/token -Headers @{"X-aws-ec2-metadata-token-ttl-seconds"="21600"}
            # Get the instance ID using the token
            $instance_id = Invoke-RestMethod -Uri http://169.254.169.254/latest/meta-data/instance-id -Headers @{"X-aws-ec2-metadata-token"=$token}
            # Check if instance_id is retrieved successfully
            if (-not $instance_id) {
            Write-Host "Failed to retrieve instance ID."
            exit 1
            }
            # Set the default AWS region
            Set-DefaultAWSRegion -Region "us-east-1"
            # Create an SSM association
            New-SSMAssociation -InstanceId $instance_id -Name "${pDocumentName}"
            # Install Web-Server feature with management tools
            Install-WindowsFeature -Name Web-Server -IncludeManagementTools
            # Update gpu 
            gpupdate /force
            #Restart machine
            shutdown -r -t 10;
          </powershell>
      Tags: 
        - Key: Name 
          Value: !Sub ${ pAwsAccount }-${ AWS::Region}-${ pAppName }-Windows-Web-01
        - Key: backup
          Value: !Sub ${ AWS::Region}-daily 
        - Key: Patch Group
          Value: !Sub ${ pAwsAccount }-${ AWS::Region}-Windows
        - Key: Cost Center 
          Value: 1.0.0.1
        - Key: DNSSuffix 
          Value: kahbrigthllc.com
        - Key: DNSHostName 
          Value: !Sub ${ pAwsAccountLC }wapp 
        - Key: Type  
          Value: Web 
        - Key: DomainJoin 
          Value: yes
        - Key: PatchGroup 
          Value: Windows-PatchGroup
        - Key: Schedule 
          Value: !Sub ${ pAwsAccount }-${ pAppName }-App
  
  rWindowsWebserver1Volume:
    Type: AWS::EC2::Volume
    Properties:
      AvailabilityZone: !Select [ 0, !Ref pAvailabilityZones ]
      Size: 30
      Tags:
        - Key: Backup
          Value: Daily

  rWindowsWebserver1VolumeAttachment:
    Type: AWS::EC2::VolumeAttachment
    Properties: 
      Device: /dev/sdf
      InstanceId: !Ref rWindowsWebserver01
      VolumeId: !Ref rWindowsWebserver1Volume
 
  rWindowsWebserver02:
    Type: AWS::EC2::Instance
    Properties: 
      IamInstanceProfile: !Ref pWebServerInstanceProfile
      ImageId: !Ref pWindows2019LatestAmiId
      InstanceType: !FindInMap 
        - mAccountVariables
        - !Ref AWS::AccountId 
        - pInstanceType
      KeyName: !FindInMap 
        - mAccountVariables
        - !Ref AWS::AccountId 
        - pKeyPair
      SecurityGroupIds: 
        - !Ref pWindowsWebServerSecurityGroup
      SubnetId: !Ref pWebServerPrivateSubnetId
      UserData:  
        Fn::Base64: !Sub | 
          <powershell>
            # Get a token for IMDSv2
            $token = Invoke-RestMethod -Method Put -Uri http://169.254.169.254/latest/api/token -Headers @{"X-aws-ec2-metadata-token-ttl-seconds"="21600"}
            # Get the instance ID using the token
            $instance_id = Invoke-RestMethod -Uri http://169.254.169.254/latest/meta-data/instance-id -Headers @{"X-aws-ec2-metadata-token"=$token}
            # Check if instance_id is retrieved successfully
            if (-not $instance_id) {
            Write-Host "Failed to retrieve instance ID."
            exit 1
            }
            # Set the default AWS region
            Set-DefaultAWSRegion -Region "us-east-1"
            # Create an SSM association
            New-SSMAssociation -InstanceId $instance_id -Name "${pDocumentName}"
            # Install Web-Server feature with management tools
            Install-WindowsFeature -Name Web-Server -IncludeManagementTools
            # Update gpu 
            gpupdate /force
            #Restart machine
            shutdown -r -t 10;
          </powershell>
      Tags: 
        - Key: Name 
          Value: !Sub ${ pAwsAccount }-${ AWS::Region}-${ pAppName }-Windows-Web-02
        - Key: backup
          Value: !Sub ${ AWS::Region}-daily 
        - Key: Patch Group
          Value: !Sub ${ pAwsAccount }-${ AWS::Region}-Windows
        - Key: Cost Center 
          Value: 1.0.0.1
        - Key: DNSSuffix 
          Value: kahbrigthllc.com
        - Key: DNSHostName 
          Value: !Sub ${ pAwsAccountLC }wapp 
        - Key: Type  
          Value: App
        - Key: DomainJoin 
          Value: yes
        - Key: PatchGroup 
          Value: Windows-PatchGroup
        - Key: Schedule 
          Value: !Sub ${ pAwsAccount }-${ pAppName }-App
 
  rWindowsWebserver2Volume:
    Type: AWS::EC2::Volume
    Properties:
      AvailabilityZone: !Select [ 0, !Ref pAvailabilityZones ]
      Size: 30
      Tags:
        - Key: Backup
          Value: Daily

  rWindowsWebserver2VolumeAttachment:
    Type: AWS::EC2::VolumeAttachment
    Properties: 
      Device: /dev/sdf
      InstanceId: !Ref rWindowsWebserver02
      VolumeId: !Ref rWindowsWebserver2Volume

Outputs:
  oLinuxWebServerInstanceId01:
    Description: The Id of the linux Web server 
    Value: !Ref rLinuxWebserver01
    Export:
      Name: !Sub ${ pAwsAccount }-${ AWS::Region}-${ pAppName }-Linux-Web-Id-01
    
  oLinuxWebServerInstanceId02:
    Description: The Id of the linux Web server 
    Value: !Ref rLinuxWebserver02
    Export:
      Name: !Sub ${ pAwsAccount }-${ AWS::Region}-${ pAppName }-Linux-Web-Id-02

  oWindowsWebServerInstanceId01:
    Description: The Id of the windows Web server
    Value: !Ref rWindowsWebserver01
    Export:
      Name: !Sub ${ pAwsAccount }-${ AWS::Region}-${ pAppName }-Windows-Web-Id-01
  
  oWindowsWebServerInstanceId02:
    Description: The Id of the windows Web server
    Value: !Ref rWindowsWebserver02
    Export:
      Name: !Sub ${ pAwsAccount }-${ AWS::Region}-${ pAppName }-Windows-Web-Id-02
  
  oLinuxWebServerIP01:
    Description: The instance IP of the first linux webserver 
    Value: !GetAtt  rLinuxWebserver01.PrivateIp
    Export:
      Name: !Sub ${ pAwsAccount }-${ AWS::Region}-${ pAppName }-Linux-Web-ip-01

  oLinuxWebServerIP02:
    Description: The instance IP of the second linux webserver
    Value: !GetAtt  rLinuxWebserver01.PrivateIp
    Export:
      Name: !Sub ${ pAwsAccount }-${ AWS::Region}-${ pAppName }-Linux-Web-ip-02

  oWindowsWebServerIP01:
    Description: The instance IP of the first windows webserver
    Value: !GetAtt  rWindowsWebserver01.PrivateIp
    Export:
      Name: !Sub ${ pAwsAccount }-${ AWS::Region}-${ pAppName }-Windows-Web-ip-01
  
  oWindowsWebServerIP02:
    Description: The instance IP of the second windows webserver
    Value: !GetAtt  rWindowsWebserver02.PrivateIp
    Export:
      Name: !Sub ${ pAwsAccount }-${ AWS::Region}-${ pAppName }-Windows-Web-ip-02 
