AWSTemplateFormatVersion: 2010-09-09
Description: Creates both the windows and linux app servers 

Parameters: 
  pAwsAccount:
    Description: The account in which the resources will be created
    Type: AWS::SSM::Parameter::Value<String>
    Default: /standard/AWSAccount
  
  pAwsAccountLC:
    Description: The account in which the resources will be created
    Type: AWS::SSM::Parameter::Value<String>
    Default: /standard/AWSAccountLC
    
  pAppName:
    Type: String
    Default: cognitech
  
  pAmznLnx2LatestAmiId:
    Description: The latest ami Id for amazon linux 2
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
  
  pWindows2019LatestAmiId:
    Description: The latest ami Id for windows 2019 
    Type : 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: /aws/service/ami-windows-latest/Windows_Server-2019-English-Full-Base
  
  pAppServerInstanceProfile:
    Description: The instance profile for the App server
    Type: String
  
  pWindowsAppServerSecurityGroup:
    Description: The windows app server security group 
    Type: String
  
  pLinuxAppServerSecurityGroup:
    Description: The linux app server security group
    Type: String
  
  pAppServerPrivateSubnetId:
    Description: The subnet Id for the app server 
    Type: String

  pDocumentName:
    Description: The domain join document for the server
    Type: String

  pAvailabilityZones:
    Description: The availability zones on which the resource will be created 
    Type: CommaDelimitedList
    Default: us-east-1a, us-east-1b

Mappings:
  mAccountVariables:
    "271457809232":
      pKeyPair: TBD
      pInstanceType: t2.micro
    "388927731914":
      pKeyPair: TBD
      pInstanceType: t2.micro 
    "882680178335":
      pKeyPair: TBD
      pInstanceType: t2.micro
    "485147667400":
      pKeyPair: windowscomputer 
      pInstanceType: t2.small 
    "526645041140":
      pKeyPair: TBD
      pInstanceType: t2.micro
    "471112707322":
      pKeyPair: TBD
      pInstanceType: t2.micro
    "730335294148":
      pKeyPair: TBD
      pInstanceType: t2.micro
    "533267408704": 
      pKeyPair: TBD
      pInstanceType: t2.micro
    "637423478842":
      pKeyPair: TBD 
      pInstanceType: t2.micro
     
Resources: 
  # https://docs.aws.amazon.com/ja_jp/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-instance.html
  rLinuxAppserver:
    Type: AWS::EC2::Instance
    Properties: 
      IamInstanceProfile: !Ref pAppServerInstanceProfile
      ImageId: !Ref pAmznLnx2LatestAmiId
      InstanceType: !FindInMap 
        - mAccountVariables
        - !Ref AWS::AccountId 
        - pInstanceType
      KeyName: !FindInMap 
        - mAccountVariables
        - !Ref AWS::AccountId 
        - pKeyPair                    
      SecurityGroupIds: 
        - !Ref pLinuxAppServerSecurityGroup
      SubnetId: !Ref pAppServerPrivateSubnetId
      UserData:  
        Fn::Base64: !Sub | 
          #!/bin/bash
          # Set the default AWS region
          export AWS_DEFAULT_REGION="us-east-1"
          # Get a token for IMDSv2
          TOKEN=$(curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600")
          # Get the instance ID using the token
          instance_id=$(curl -H "X-aws-ec2-metadata-token: $TOKEN" -s http://169.254.169.254/latest/meta-data/instance-id)
          # Check if instance_id is retrieved successfully
          if [ -z "$instance_id" ]; then
            echo "Failed to retrieve instance ID."
            exit 1
          fi
          # Create an SSM association
          aws ssm create-association --instance-id "$instance_id" --name "${pDocumentName}"
      Tags: 
        - Key: Name 
          Value: !Sub ${ pAwsAccount }-${ AWS::Region}-${ pAppName }-Linux-App
        - Key: backup
          Value: !Sub ${ AWS::Region}-daily 
        - Key: Patch Group
          Value: !Sub ${ pAwsAccount }-${ AWS::Region}-Linux
        - Key: Cost Center 
          Value: 1.0.0.1
        - Key: DNSSuffix 
          Value: kahbrigthllc.com
        - Key: DNSHostName 
          Value: !Sub ${ pAwsAccountLC }lapp 
        - Key: Type  
          Value: App
        - Key: DomainJoin 
          Value: yes
        - Key: PatchGroup 
          Value: Linux-PatchGroup
        - Key: Schedule 
          Value: !Sub ${ pAwsAccount }-${ pAppName }-App
        - Key: LinuxSudoers 
          Value: yes

  rLinuxAppserverVolume:
    Type: AWS::EC2::Volume
    Properties:
      AvailabilityZone: !Select [ 0, !Ref pAvailabilityZones ]
      Size: 30
      Tags:
        - Key: Backup
          Value: Daily

  rLinuxAppserverVolumeAttachment:
    Type: AWS::EC2::VolumeAttachment
    Properties: 
      Device: /dev/sdf
      InstanceId: !Ref rLinuxAppserver
      VolumeId: !Ref rLinuxAppserverVolume

  rWindowsAppserver:
    Type: AWS::EC2::Instance
    Properties: 
      IamInstanceProfile: !Ref pAppServerInstanceProfile
      ImageId: !Ref pWindows2019LatestAmiId
      InstanceType: !FindInMap 
        - mAccountVariables
        - !Ref AWS::AccountId 
        - pInstanceType
      KeyName: !FindInMap 
        - mAccountVariables
        - !Ref AWS::AccountId 
        - pKeyPair 
      SecurityGroupIds: 
        - !Ref pWindowsAppServerSecurityGroup
      SubnetId: !Ref pAppServerPrivateSubnetId
      UserData:  
        Fn::Base64: !Sub | 
          <powershell>
            # Get a token for IMDSv2
            $token = Invoke-RestMethod -Method Put -Uri http://169.254.169.254/latest/api/token -Headers @{"X-aws-ec2-metadata-token-ttl-seconds"="21600"}
            # Get the instance ID using the token
            $instance_id = Invoke-RestMethod -Uri http://169.254.169.254/latest/meta-data/instance-id -Headers @{"X-aws-ec2-metadata-token"=$token}
            # Check if instance_id is retrieved successfully
            if (-not $instance_id) {
            Write-Host "Failed to retrieve instance ID."
            exit 1
            }
            # Set the default AWS region
            Set-DefaultAWSRegion -Region "us-east-1"
            # Create an SSM association
            New-SSMAssociation -InstanceId $instance_id -Name "${pDocumentName}"
            # Update gpu 
            gpupdate /force
          </powershell>
      Tags: 
        - Key: Name 
          Value: !Sub ${ pAwsAccount }-${ AWS::Region}-${ pAppName }-Windows-App
        - Key: backup
          Value: !Sub ${ AWS::Region}-daily 
        - Key: Patch Group
          Value: !Sub ${ pAwsAccount }-${ AWS::Region}-Windows
        - Key: Cost Center 
          Value: 1.0.0.1
        - Key: DNSSuffix 
          Value: kahbrigthllc.com
        - Key: DNSHostName 
          Value: !Sub ${ pAwsAccountLC }wapp 
        - Key: Type  
          Value: App
        - Key: DomainJoin 
          Value: yes
        - Key: PatchGroup 
          Value: Windows-PatchGroup
        - Key: Schedule 
          Value: !Sub ${ pAwsAccount }-${ pAppName }-App
  
  rWindowsAppserverVolume:
    Type: AWS::EC2::Volume
    Properties:
      AvailabilityZone: !Select [ 0, !Ref pAvailabilityZones ]
      Size: 30
      Tags:
        - Key: Backup
          Value: Daily

  rWindowsAppserverVolumeAttachment:
    Type: AWS::EC2::VolumeAttachment
    Properties: 
      Device: /dev/sdf
      InstanceId: !Ref rWindowsAppserver
      VolumeId: !Ref rWindowsAppserverVolume
        

Outputs:
  oLinuxAppServerInstanceId:
    Description: The Id of the linux App server 
    Value: !Ref rLinuxAppserver
    Export:
      Name: !Sub ${ pAwsAccount }-${ AWS::Region}-${ pAppName }-Linux-App-Id

  oWindowsAppServerInstanceId:
    Description: The Id of the windows App server
    Value: !Ref rWindowsAppserver
    Export:
      Name: !Sub ${ pAwsAccount }-${ AWS::Region}-${ pAppName }-Windows-App-Id
  

    
